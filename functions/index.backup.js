// functions/index.js
require("dotenv").config();// 🔽 初始化設定：環境變數、SendGrid、Firebase Admin
const { onDocumentCreated } = require("firebase-functions/v2/firestore");
const functions = require("firebase-functions");
const sgMail = require("@sendgrid/mail");
sgMail.setApiKey(process.env.SENDGRID_KEY);
const admin = require("firebase-admin");

admin.initializeApp();

// 🔽 多語系信件內容設定（通知推薦人、歡迎信）
const i18nMessages = {
  notifyRecommendation: {
    zh: {
      subject: (name) => `感謝你對 ${name} 的推薦 💫`,
      text: (recommenderName, recommendeeName) => `Hi ${recommenderName}，

謝謝你為 ${recommendeeName} 寫下這段推薦。
這不只是一封信，而是他職涯裡，一份難得的肯定。

或許你還記得，當時你們一起努力完成的那個專案，
或是在某段低潮時，他對你的支持與合作。

你的這段話，會成為他日後回顧職涯時，一道溫柔的光。

如果你也想讓過去合作過的夥伴，知道你記得他們的好，
也歡迎你為自己建立推薦頁，成為這個互相點亮的星系的一員。

🌟 立即建立推薦頁：https://galaxyz.ai/pages/login.html

謝謝你，讓信任開始流動。  
Galaxyz 團隊敬上`
    },
    en: {
      subject: (name) => `Thank you for recommending ${name} 💫`,
      text: (recommenderName, recommendeeName) => `Hi ${recommenderName},

Thank you for writing a recommendation for ${recommendeeName}.
This isn't just a message — it's a meaningful part of their career.

You might remember that project you worked on together,
or how they supported you through a challenging time.

Your words will become a warm light they carry as they look back on their journey.

If you’d like to share similar memories with people you've worked with,
you’re welcome to create your own recommendation page — and pass the light on.

🌟 Start your own page: https://galaxyz.ai/pages/login.html

Thank you for helping trust move forward.  
Team Galaxyz`
    }
  },
  welcomeEmail: {
  zh: {
    subject: "歡迎加入 Galaxyz！🌟",
    text: (name) => `嗨 ${name || "朋友"}，

歡迎加入 Galaxyz！

在這個履歷可以被 AI 生成的時代，
我們更想留下的，是那些無法被取代的瞬間 ——
🌟在你剛進公司時，願意牽著你跑的學長姐；
🌟在你犯錯時，沒責備你反而幫你擋下火線的主管；
🌟總是默默補位、不爭功的團隊夥伴；
🌟雖然只合作三個月，但始終記得你努力的客戶；
🌟還有那位，幾年前短暫合作過，但你至今仍記得他有多可靠。

如果你願意，現在就寫下一句你對他的感謝吧。
那句話可能很簡單：「謝謝你，讓我在低潮的時候不孤單。」
但對方收到時，會覺得：「原來我做過的那些事，你都記得。」

這，就是 Galaxyz 想幫你留下的東西。
不是一封浮誇的推薦信，而是一份真誠的職涯回憶。

你可以從這裡開始：
✅ 邀請合作過的夥伴，寫下對你的推薦  
✅ 為那些幫過你的人，主動送上一句「謝謝你」  
✅ 建立屬於你的職涯信任網絡，累積那些最真實的價值

我們相信：
履歷會過時，但信任不會。  
你值得被記得，也值得被推薦。

Galaxyz 團隊敬上`
  },

    en: {
      subject: "Welcome to Galaxyz! 🌟",
      text: (name) => `Hi ${name || "there"},

Welcome to Galaxyz!

In this era where résumés can be generated by AI,
what we truly want to preserve are the irreplaceable moments ——

🌟 The senior colleague who guided you when you first joined the company;  
🌟 The manager who had your back when you made a mistake;  
🌟 The teammate who quietly stepped up without seeking credit;  
🌟 The client who only worked with you for three months, but never forgot your efforts;  
🌟 And that person — the one you collaborated with years ago, and still remember for their reliability.

If you're willing, take a moment to write a simple thank-you to them now.  
It could be something as short as: "Thank you for being there when I was struggling."  
But when they receive it, they’ll feel: “So you remembered what I did.”

That’s what Galaxyz is here for —  
Not to create flashy recommendation letters,  
but to preserve genuine career memories.

You can start from here:
✅ Invite people you've worked with to write a recommendation for you  
✅ Send a message of appreciation to those who've helped you  
✅ Build your own trust-based career network, filled with real value

We believe:
Résumés will fade, but trust will last.  
You deserve to be remembered — and recommended.

Warmly,  
The Galaxyz Team`

    }
  }
};


// 🔽 功能 1：推薦送出後，自動寄出感謝信（給推薦人）與通知信（給被推薦人）
// 📥 監聽路徑：users/{userId}/recommendations/{recId}
// 📤 動作：寄送 2 封信（被推薦人通知、推薦人感謝信）
exports.notifyOnRecommendationCreated = onDocumentCreated("users/{userId}/recommendations/{recId}", async (event) => {
  
    const snap = event.data;
    const data = snap.data();
    const userId = event.params.userId;
    const { name, email, content, jobId } = data;
  
    console.log(`📣 新推薦來自 ${name} (${email})，針對職缺 ${jobId}`);
    // 🔍 嘗試讀取被推薦者（userId）資料
    const userSnap = await admin.firestore().doc(`users/${userId}`).get();
    const user = userSnap.data();
    if (!user || !user.email) {
      console.error("❌ 找不到被推薦者資料");
      return null;
    }
  
    const recommendeeEmail = user.email;
    const recommendeeName = user.name || "Galaxyz 使用者";
  
    try {  
      // 📤 信件一：通知被推薦者有新推薦
      await sgMail.send({
        to: recommendeeEmail,
        from: {
            email: process.env.SENDER_EMAIL,
            name: process.env.SENDER_NAME          
        },
        subject: `✨ 你收到來自 ${name} 的推薦`,
        text: `${name} 剛剛完成了一份推薦給你。\n\n內容摘要：\n"${content}"\n\n👉 立刻查看：https://galaxyz.ai/pages/recommend-summary.html?userId=${userId}`,
        trackingSettings: {
            clickTracking: { enable: false, enableText: false }
          }
    });
          
      const lang = data.lang || "zh";  // 從推薦內容中讀取語系
      const subject = i18nMessages.notifyRecommendation[lang].subject(recommendeeName);
      const text = i18nMessages.notifyRecommendation[lang].text(name, recommendeeName);
      // 📤 信件二：寄感謝信給推薦人（根據語系切換內容）
      await sgMail.send({
        to: email,
        from: {
          email: process.env.SENDER_EMAIL,
          name: process.env.SENDER_NAME
        },
        subject,
        text,
        trackingSettings: {
          clickTracking: { enable: false, enableText: false }
        }
      });          
  
      console.log(`✅ 已成功寄出感謝信給推薦人 ${email}`);
    } catch (error) {
      console.error("❌ SendGrid 寄信失敗：", error);
    }
  
    return null;
  });

// 🔽 功能 2：推薦人完成註冊後，自動補上 recommenderId
// 📥 監聽路徑：users/{userId}
// 📤 動作：補寫推薦紀錄的 recommenderId、刪除 pendingUser
exports.onUserCreated_assignRecommenderId = onDocumentCreated("users/{userId}", async (event) => {
  const snap = event.data;
  const newUser = snap.data();
  const newUserId = event.params.userId;
  const email = newUser?.email;

  if (!email) {
    console.warn("⚠️ 新使用者缺少 email，略過 recommenderId 配對");
    return;
  }

  console.log(`🧩 新使用者註冊：${email} (${newUserId})`);

  try {
    // 🔍 查找 pendingUsers 中符合 email 的紀錄
    const pendingSnap = await admin.firestore()
      .collection("pendingUsers")
      .where("email", "==", email)
      .limit(1)
      .get();

    if (pendingSnap.empty) {
      console.log("🔍 沒有找到對應的 pendingUser 推薦紀錄");
      return;
    }

    const pendingData = pendingSnap.docs[0].data();
    const inviteId = pendingData?.inviteId;

    if (!inviteId) {
      console.warn("⚠️ 找到 pendingUser，但缺少 inviteId，略過更新");
      return;
    }

    // 🔍 從 pendingUser 找出 inviteId，查詢該推薦紀錄
    const recSnap = await admin.firestore()
      .collection(`users/${pendingData.userId}/recommendations`)
      .where("inviteId", "==", inviteId)
      .get();
    
    console.log(`🕵️‍♀️ 查找到推薦紀錄共 ${recSnap.size} 筆，嘗試補上 recommenderId`);

    if (recSnap.empty) {
      console.log("ℹ️ 無需補寫 recommenderId：沒有符合條件的推薦紀錄");
      return;
    }

    for (const recDoc of recSnap.docs) {
      const recData = recDoc.data();
      if (!recData.recommenderId) {
        // ✅ 寫入 recommenderId
        await recDoc.ref.update({ recommenderId: newUserId });
        console.log(`✅ 已補上 recommenderId：${recDoc.id}`);
      } else {
        console.log(`ℹ️ 已存在 recommenderId：${recDoc.id}，略過更新`);
      }
    }

    // 🧹 清除已完成配對的 pendingUser
    await pendingSnap.docs[0].ref.delete();
    console.log(`🧹 已刪除 pendingUser：${pendingSnap.docs[0].id}`);

  } catch (err) {
    console.error("❌ 自動補 recommenderId 發生錯誤：", err);
  }

  return;
});

// 🔽 功能 3：新使用者註冊後，自動寄送歡迎信
// 📥 監聽路徑：users/{userId}
// 📤 動作：根據語系寄送多語歡迎信
exports.sendWelcomeEmailOnUserDocCreated = onDocumentCreated("users/{userId}", async (event) => {
  const snap = event.data;
  const user = snap.data();
  const email = user?.email;
  const lang = user?.lang;

    // ✅ 若有 inviteCode，則自動累加使用次數
  const inviteCode = user?.inviteCode;
  if (inviteCode) {
    try {
      const inviteRef = admin.firestore().collection("inviteCodes").doc(inviteCode);
      const inviteSnap = await inviteRef.get();
      if (inviteSnap.exists) {
        const currentCount = inviteSnap.data().usageCount || 0;
        await inviteRef.update({ usageCount: currentCount + 1 });
        console.log(`🔢 邀請碼 ${inviteCode} 使用次數 +1 成功`);
      } else {
        console.warn(`⚠️ 找不到 inviteCode：${inviteCode}`);
      }
    } catch (err) {
      console.error("❌ 累加 inviteCode 使用次數失敗：", err);
    }
  }
  
  // 🔍 驗證 email 是否存在，再決定是否寄信
  if (!email) {
    console.warn("⚠️ 使用者缺少 email，略過歡迎信");
    return;
  }

  const subject = i18nMessages.welcomeEmail[lang]?.subject || i18nMessages.welcomeEmail.en.subject;
  const text = i18nMessages.welcomeEmail[lang]?.text(user.displayName) || i18nMessages.welcomeEmail.en.text(user.displayName);

  const msg = {
    to: email,
    from: {
      email: process.env.SENDER_EMAIL,
      name: process.env.SENDER_NAME
    },
    subject,
    text,
    trackingSettings: {
      clickTracking: { enable: false, enableText: false }
    }
  };

  try {
    await sgMail.send(msg);
    console.log(`✅ 歡迎信已寄出給 ${email}`);
  } catch (error) {
    console.error("❌ 寄送歡迎信失敗：", error);
  }

  return;
});




